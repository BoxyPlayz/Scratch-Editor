{"version":3,"file":"js/addon-entry-editor-square-inputs.js","sources":["webpack://GUI/./src/addons/addons/custom-block-shape/update-all-blocks.js","webpack://GUI/./src/addons/addons/editor-square-inputs/_runtime_entry.js","webpack://GUI/./src/addons/addons/editor-square-inputs/userscript.js"],"sourcesContent":["export function updateAllBlocks(vm, workspace, blockly) {\n  const eventsOriginallyEnabled = blockly.Events.isEnabled();\n  blockly.Events.disable(); // Clears workspace right-clickâ†’undo (see SA/SA#6691)\n\n  if (workspace) {\n    if (vm.editingTarget) {\n      vm.emitWorkspaceUpdate();\n    }\n    const flyout = workspace.getFlyout();\n    if (flyout) {\n      const flyoutWorkspace = flyout.getWorkspace();\n      window.Blockly.Xml.clearWorkspaceAndLoadFromXml(\n        window.Blockly.Xml.workspaceToDom(flyoutWorkspace),\n        flyoutWorkspace\n      );\n      workspace.getToolbox().refreshSelection();\n      workspace.toolboxRefreshEnabled_ = true;\n    }\n  }\n\n  // There's no particular reason for checking whether events were originally enabled.\n  // Unconditionally enabling events at this point could, in theory, cause bugs in the future.\n  if (eventsOriginallyEnabled) blockly.Events.enable(); // Re-enable events\n}\n","/* generated by pull.js */\nimport _js from \"./userscript.js\";\nexport const resources = {\n  \"userscript.js\": _js,\n};\n","import { updateAllBlocks } from \"../custom-block-shape/update-all-blocks.js\";\n\nexport default async function ({ addon }) {\n  const ScratchBlocks = await addon.tab.traps.getBlockly();\n  const vm = addon.tab.traps.vm;\n\n  const opcodeToSettings = {\n    text: \"text\",\n    argument_editor_string_number: \"text\",\n    math_number: \"number\",\n    math_integer: \"number\",\n    math_whole_number: \"number\",\n    math_positive_number: \"number\",\n    math_angle: \"number\",\n    note: \"number\",\n    colour_picker: \"color\",\n  };\n\n  const originalJsonInit = ScratchBlocks.BlockSvg.prototype.jsonInit;\n\n  ScratchBlocks.BlockSvg.prototype.jsonInit = function (json) {\n    if (!addon.self.disabled && opcodeToSettings[this.type] && addon.settings.get(opcodeToSettings[this.type])) {\n      originalJsonInit.call(this, {\n        ...json,\n        outputShape: ScratchBlocks.OUTPUT_SHAPE_SQUARE,\n      });\n    } else {\n      originalJsonInit.call(this, json);\n    }\n  };\n\n  function update() {\n    updateAllBlocks(vm, addon.tab.traps.getWorkspace(), ScratchBlocks);\n  }\n\n  addon.self.addEventListener(\"disabled\", update);\n  addon.self.addEventListener(\"reenabled\", update);\n  addon.settings.addEventListener(\"change\", update);\n  update();\n}\n"],"mappings":";;;;;;;;;;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;ACvBA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;ACJA;AAEA;AAAA;AAAA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AAAA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;;;;A","sourceRoot":""}