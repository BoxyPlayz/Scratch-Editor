{"version":3,"file":"js/addon-entry-editor-number-arrow-keys.js","sources":["webpack://GUI/./src/addons/addons/editor-number-arrow-keys/_runtime_entry.js","webpack://GUI/./src/addons/addons/editor-number-arrow-keys/userscript.js"],"sourcesContent":["/* generated by pull.js */\nimport _js from \"./userscript.js\";\nexport const resources = {\n  \"userscript.js\": _js,\n};\n","export default async function ({ addon }) {\n  const settings = {\n    none: 0,\n    hundredth: 0.01,\n    tenth: 0.1,\n    one: 1,\n    ten: 10,\n  };\n  const inputMap = new WeakMap();\n\n  const amountOfDecimals = (numStr) => {\n    if (!numStr.includes(\".\")) return 0;\n    return numStr.toString().split(\".\")[1].length;\n  };\n\n  const shiftDecimalPointToRight = (num, times) => {\n    const isNumberNegative = num[0] === \"-\";\n    let numStr = isNumberNegative ? num.substring(1) : num;\n    for (let i = 0; i < times; i++) {\n      if (numStr.indexOf(\".\") === -1) numStr += 0;\n      else if (numStr.indexOf(\".\") === numStr.length - 2) numStr = numStr.replace(\".\", \"\");\n      else {\n        const index = numStr.indexOf(\".\");\n        const numArrFiltered = Array.from(numStr.replace(\".\", \"\"));\n        numArrFiltered.splice(index + 1, 0, \".\");\n        numStr = numArrFiltered.join(\"\");\n      }\n    }\n    return BigInt(numStr) * (isNumberNegative ? -1n : 1n);\n  };\n  const shiftDecimalPointToLeft = (num, times) => {\n    const isNumberNegative = num[0] === \"-\";\n    let numStr = isNumberNegative ? num.substring(1) : num;\n    for (let i = 0; i < times; i++) {\n      if (numStr.indexOf(\".\") === 0) numStr = \".0\" + numStr.substring(1);\n      else if (numStr.indexOf(\".\") === -1) {\n        const numArr = Array.from(numStr);\n        numArr.splice(numArr.length - 1, 0, \".\");\n        numStr = numArr.join(\"\");\n      } else {\n        const index = numStr.indexOf(\".\");\n        const numArrFiltered = Array.from(numStr.replace(\".\", \"\"));\n        numArrFiltered.splice(index - 1, 0, \".\");\n        numStr = numArrFiltered.join(\"\");\n      }\n    }\n\n    // Adds zero before the decimal point if necessary (.1 → 0.1)\n    if (numStr[0] === \".\") {\n      numStr = \"0\" + numStr;\n    }\n\n    // Removes trailing zeros (2.250 → 2.25)\n    if (numStr.includes(\".\")) {\n      numStr = numStr.replace(/0*$/, \"\");\n    }\n\n    // Removes the decimal point if it's the last character (2. → 2)\n    if (numStr.endsWith(\".\")) {\n      numStr = numStr.slice(0, -1);\n    }\n\n    return numStr ? (isNumberNegative ? \"-\" : \"\") + numStr : 0;\n  };\n\n  const isValidNumber = (numStr) => {\n    if (numStr.length > 30) return false;\n    try {\n      BigInt(numStr.replace(\".\", \"\"));\n    } catch {\n      return false; // Even though an error would occur later anyway, we still catch now to abort before e.preventDefault().\n    }\n    return true;\n  };\n\n  const isSupportedElement = (el) => {\n    if (el.classList.contains(\"blocklyHtmlInput\")) return true;\n    else if (el.matches(\".mediaRecorderPopupContent input[type=number]\")) {\n      // Number inputs in `mediarecorder` addon modal\n      return true;\n    } else if (el.className.includes(\"input_input-form_\")) {\n      if (el.matches(\"[class*=sprite-info_sprite-info_] [class*=input_input-small_]\")) {\n        // Sprite X/Y coordinates, size and direction (excludes sprite name)\n        return true;\n      } else if (el.matches(\"[class*=paint-editor_editor-container-top_] input[type=number]\")) {\n        // Number inputs in costume editor (note that browsers already provide up/down clickable buttons for these)\n        return true;\n      } else return false;\n    }\n    return false;\n  };\n\n  document.body.addEventListener(\"keydown\", (e) => {\n    if (addon.self.disabled) return;\n    if (![\"ArrowUp\", \"ArrowDown\"].includes(e.key)) return;\n    if (!isSupportedElement(e.target)) return;\n    if (!e.target.value) return;\n    if (!isValidNumber(e.target.value)) return;\n\n    e.preventDefault();\n    // If this is a text input, this will prevent the cursor from moving to the beginning/end of the input.\n    // If this is a number input, it will prevent the default browser behavior when pressing up/down in a\n    // number input (increase or decrease by 1). If we didn't prevent, the user would be increasing twice.\n\n    let changeBy = e.key === \"ArrowUp\" ? 1 : -1;\n    if (addon.settings.get(\"useCustom\")) {\n      let settingValue = e.shiftKey\n        ? addon.settings.get(\"shiftCustom\")\n        : e.altKey\n          ? addon.settings.get(\"altCustom\")\n          : addon.settings.get(\"regularCustom\");\n      if (settingValue === \"\") settingValue = 0;\n      let valueAsFloat = parseFloat(settingValue);\n      if (valueAsFloat < 0) valueAsFloat *= -1; // If user typed a negative number, we make it positive\n      if (Number.isNaN(valueAsFloat)) {\n        return;\n      } else if (valueAsFloat === 0 || (valueAsFloat < 100000000 && valueAsFloat > 0.00000099)) {\n        // This will exclude valid floats such as `1e20` that are less than 9 characters\n        changeBy *= valueAsFloat;\n      } else {\n        return;\n      }\n    } else {\n      changeBy *= e.shiftKey\n        ? settings[addon.settings.get(\"shift\")]\n        : e.altKey\n          ? settings[addon.settings.get(\"alt\")]\n          : settings[addon.settings.get(\"regular\")];\n    }\n\n    const decimalCount = Math.max(amountOfDecimals(e.target.value), amountOfDecimals(changeBy.toString()));\n    const newValueAsBigInt =\n      shiftDecimalPointToRight(e.target.value, decimalCount) +\n      shiftDecimalPointToRight(changeBy.toString(), decimalCount);\n    const newValue = shiftDecimalPointToLeft(newValueAsBigInt.toString(), decimalCount);\n\n    if (e.target.className.includes(\"input_input-form_\")) {\n      Object.getOwnPropertyDescriptor(e.target.constructor.prototype, \"value\").set.call(e.target, newValue.toString());\n      e.target.dispatchEvent(new Event(\"input\", { bubbles: true }));\n\n      // The user probably wants to visualize how the sprite changes size, coordinates, direction, etc.\n      // without having to press Enter. But updating in realtime could be bad for performance.\n      const FLUSH_AFTER_MS = 300; // Number of ms to wait until the input change takes effect.\n      // Force flush after incrementing/decrementing 5 times in a row, even if it's not been 300ms:\n      const FLUSH_AFTER_N_STEPS = 5;\n\n      // https://github.com/scratchfoundation/scratch-gui/blob/develop/src/components/forms/buffered-input-hoc.jsx\n      // This function calls handleFlush() on the buffered input when called.\n      const flushInput = () => e.target.dispatchEvent(new Event(\"blur\", { bubbles: true }));\n\n      const currentTime = document.timeline.currentTime; // Similar to Date.now() but can't be changed by user unexpectedly\n      if (!inputMap.has(e.target)) inputMap.set(e.target, { time: null, steps: -1 });\n      inputMap.get(e.target).time = currentTime;\n      const newNumOfSteps = (inputMap.get(e.target).steps += 1);\n\n      if (newNumOfSteps === FLUSH_AFTER_N_STEPS) {\n        flushInput();\n        inputMap.delete(e.target);\n      } else {\n        setTimeout(() => {\n          if (inputMap.get(e.target)?.time === currentTime) {\n            flushInput();\n            inputMap.delete(e.target);\n          }\n        }, FLUSH_AFTER_MS);\n      }\n    } else {\n      // Normal Blockly input\n      e.target.value = newValue.toString();\n    }\n  });\n}\n"],"mappings":";;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;;;;;;;;;;;;ACJA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAKA;AAEA;AACA;AAGA;AAEA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAEA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;A","sourceRoot":""}