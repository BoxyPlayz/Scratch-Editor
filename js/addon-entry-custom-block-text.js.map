{"version":3,"file":"js/addon-entry-custom-block-text.js","sources":["webpack://GUI/./src/addons/addons/custom-block-shape/update-all-blocks.js","webpack://GUI/./src/addons/addons/custom-block-text/_runtime_entry.js","webpack://GUI/./src/addons/addons/custom-block-text/userscript.js","webpack://GUI/./src/addons/addons/middle-click-popup/module.js"],"sourcesContent":["export function updateAllBlocks(vm, workspace, blockly) {\n  const eventsOriginallyEnabled = blockly.Events.isEnabled();\n  blockly.Events.disable(); // Clears workspace right-clickâ†’undo (see SA/SA#6691)\n\n  if (workspace) {\n    if (vm.editingTarget) {\n      vm.emitWorkspaceUpdate();\n    }\n    const flyout = workspace.getFlyout();\n    if (flyout) {\n      const flyoutWorkspace = flyout.getWorkspace();\n      window.Blockly.Xml.clearWorkspaceAndLoadFromXml(\n        window.Blockly.Xml.workspaceToDom(flyoutWorkspace),\n        flyoutWorkspace\n      );\n      workspace.getToolbox().refreshSelection();\n      workspace.toolboxRefreshEnabled_ = true;\n    }\n  }\n\n  // There's no particular reason for checking whether events were originally enabled.\n  // Unconditionally enabling events at this point could, in theory, cause bugs in the future.\n  if (eventsOriginallyEnabled) blockly.Events.enable(); // Re-enable events\n}\n","/* generated by pull.js */\nimport _js from \"./userscript.js\";\nexport const resources = {\n  \"userscript.js\": _js,\n};\n","import { updateAllBlocks } from \"../custom-block-shape/update-all-blocks.js\";\nimport { clearTextWidthCache } from \"../middle-click-popup/module.js\";\n\nexport default async function ({ addon, console }) {\n  let currentTextSize = 100;\n\n  const vm = addon.tab.traps.vm;\n  const blocklyInstance = await addon.tab.traps.getBlockly();\n\n  // Handling the CSS from here instead of a userstyle is much more stable, as\n  // there's no code outside of this addon dynamically toggling the styles.\n  // This way, we can clearly control the execution order of style operations.\n  // For example, we always want to call updateAllBlocks() after the styles\n  // were updated according to the user's settings, not before.\n  const fontSizeCss = document.createElement(\"style\");\n  // Be careful with specificity because we're adding this userstyle manually\n  // to the <head> without checking if other styles are above or below.\n  fontSizeCss.textContent = `\n    .blocklyText,\n    .blocklyHtmlInput {\n      font-size: calc(var(--customBlockText-sizeSetting) * 0.12pt) !important;\n    }\n    .blocklyFlyoutLabelText {\n      font-size: calc(var(--customBlockText-sizeSetting) * 0.14pt) !important;\n    }`;\n  fontSizeCss.disabled = true;\n  document.head.appendChild(fontSizeCss);\n  //\n  const boldCss = document.createElement(\"style\");\n  boldCss.textContent = `\n    .blocklyText,\n    .blocklyHtmlInput {\n      font-weight: bold;\n    }`;\n  boldCss.disabled = true;\n  document.head.appendChild(boldCss);\n  //\n  const textShadowCss = document.createElement(\"style\");\n  textShadowCss.textContent = `\n    .blocklyDraggable > .blocklyText,\n    .blocklyDraggable > g > text {\n      text-shadow: 1px 1px 0 rgba(0, 0, 0, 0.4);\n    }`;\n  textShadowCss.disabled = true;\n  document.head.appendChild(textShadowCss);\n\n  const updateBlockly = () => {\n    blocklyInstance.Field.cacheWidths_ = {}; // Clear text width cache\n    // If font size has changed, middle click popup needs to clear it's cache too\n    clearTextWidthCache();\n\n    updateAllBlocks(vm, addon.tab.traps.getWorkspace(), blocklyInstance);\n  };\n\n  const setFontSize = (wantedSize) => {\n    if (wantedSize !== 100) document.documentElement.style.setProperty(\"--customBlockText-sizeSetting\", wantedSize);\n\n    if (wantedSize === 100) {\n      fontSizeCss.disabled = true;\n      currentTextSize = 100;\n      return;\n    } else if (wantedSize === currentTextSize) return;\n\n    currentTextSize = wantedSize;\n    fontSizeCss.disabled = false;\n  };\n  const setBold = (bool) => {\n    boldCss.disabled = !bool;\n  };\n  const setTextShadow = (bool) => {\n    textShadowCss.disabled = !bool;\n  };\n\n  addon.settings.addEventListener(\"change\", () => {\n    setFontSize(addon.settings.get(\"size\"));\n    setBold(addon.settings.get(\"bold\"));\n    setTextShadow(addon.settings.get(\"shadow\"));\n    updateBlockly();\n  });\n\n  addon.self.addEventListener(\"disabled\", () => {\n    setFontSize(100);\n    setBold(false);\n    setTextShadow(false);\n    updateBlockly();\n  });\n  addon.self.addEventListener(\"reenabled\", () => {\n    setFontSize(addon.settings.get(\"size\"));\n    setBold(addon.settings.get(\"bold\"));\n    setTextShadow(addon.settings.get(\"shadow\"));\n    updateBlockly();\n  });\n\n  setFontSize(addon.settings.get(\"size\"));\n  setBold(addon.settings.get(\"bold\"));\n  setTextShadow(addon.settings.get(\"shadow\"));\n  updateBlockly();\n}\n","import EventTarget from \"../../event-target.js\"; /* inserted by pull.js */\n\nconst textWidthCache = new Map();\nconst textWidthCacheSize = 1000;\n\nconst eventTarget = new EventTarget();\nconst eventClearTextCache = \"clearTextCache\";\n\n/**\n * Gets the width of an svg text element, with caching.\n * @param {SVGTextElement} textElement\n */\nexport function getTextWidth(textElement) {\n  let string = textElement.innerHTML;\n  if (string.length === 0) return 0;\n  let width = textWidthCache.get(string);\n  if (width) return width;\n  width = textElement.getBoundingClientRect().width;\n  textWidthCache.set(string, width);\n  if (textWidthCache.size > textWidthCacheSize) {\n    textWidthCache.delete(textWidthCache.keys().next());\n  }\n  return width;\n}\n\n/**\n * Clears the text width cache of the middle click popup.\n */\nexport function clearTextWidthCache() {\n  textWidthCache.clear();\n  eventTarget.dispatchEvent(new CustomEvent(eventClearTextCache));\n}\n\n/**\n * @param {() => void} func\n */\nexport function onClearTextWidthCache(func) {\n  eventTarget.addEventListener(eventClearTextCache, func);\n}\n"],"mappings":";;;;;;;;;;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;ACvBA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;;;;;;;;;;;;ACJA;AAAA;AAAA;AAAA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAQA;AACA;AACA;AACA;AACA;AAKA;AACA;AACA;AACA;AACA;AAKA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;;;;;;;;;;;;ACjGA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;A","sourceRoot":""}